# Base config file which stores the default parameters which apply to all model configurations
---

# Whether to run in development/debugging mode; this only uses a few samples in in the train/val dataset
# to quickly run the code as well as sets num_workers=0
dev_mode: True

# Base directory for output files; do not change this 
output_dir: "output/train"

# Experiment name; this will be used for the output directory; use "development" when developing
exp_name: "development"

# Name of dataset; must be one of the names in the dataset_map dict
dataset_name: "ImageNet"

# Log the train progress every n steps
log_train_steps: 20

# Parameters for the dataset class
dataset:

  # Path to the root of the dataset; detects which path to use based on device
  root: "/mnt/d/datasets/imagenet" # linux/windows path
  root_mac: "/Users/bsele/datasets/imagenet-2012" # mac path

  # Number of CPU processes the next sample in the dataset; use 0 to only use the main process
  num_workers: 4

train:
  # Configurations for learning parameters such as the optmizier and lr scheduler
  learning_config: "vit_learning_config"

  batch_size: 32

  # The epoch to start on; starting at 1 makes calculations for logging and checkpointing more intuitive
  start_epoch: 1
  epochs: 200

  # Number of epochs to checkpoint after; use 'null' to turn off checkpointing
  ckpt_epochs: 60

  # Path of weights file (.pt) to resume training; 
  # use `null` to train a new model from scratch
  checkpoint_path:

validation:
  batch_size: 4

# GPU parameters
cuda:
  # List of GPU devices to use
  gpus: [0]


# Reproducibility information
reproducibility:
  seed: 42


# Params for training objects


# ViT learning config described in the paper
vit_learning_config:
  optimizer: "adam"

  learning_rate: 0.0001 #1e-4

  # L2 regulartization penalty to add to the loss function
  weight_decay: 0.1

  betas: [0.9, 0.999]
  
  lr_scheduler: "cosine_annealing"
  lr_params:

